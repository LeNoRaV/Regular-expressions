import re


TEST_CASES_VALIDATION_IP = [
    ('1.1.1.1', True),
    ('1.10.100.255', True),
    ('199.199.199.199', True),
    ('199.299.199.199', False),
    ('256.256.256.256', False),
    ('1.10.100.1000', False),
    ('1.10.100', False),
    ('1.10..100', False),
    ('1.10.10 .100', False),
]


TEST_CASES_VALIDATION_TIME = [
    ('1:20', True),
    ('0:35', True),
    ('7:59', True),
    ('7:59 AM', True),
    ('7:59 PM', True),
    ('7:59AM', True),
    ('7:59PM', True),
    ('17:59 AM', False),
    ('17:59 PM', False),
    ('17:59AM', False),
    ('17:59PM', False),
    ('17:05', True),
    ('17:55', True),
    ('25:05', False),
    ('17:59 PMX', False),
    ('11:60', False),
    ('11: 20', False),
    ('14 :55', False),
]


TEST_CASES_SEARCH_IP = [
    ('1.1.1. text text', []),
    ('1.1.1.1 text text', ['1.1.1.1']),
    ('text text 1.1.1.1 text text', ['1.1.1.1']),
    ('text text 1.1.1.1', ['1.1.1.1']),
    ('text text 1.1.1.1 2.2.2.2', ['1.1.1.1', '2.2.2.2']),
    ('text text 1.1.1.1 2.2.2.2', ['1.1.1.1', '2.2.2.2']),
    ('text text 1.1.1.1.2.2.2.2', []),
    ('text text 1.1.1.1,2.2.2.2', ['1.1.1.1', '2.2.2.2']),
    ('text text 1.1.1.1.1,2.2.2.2', ['2.2.2.2']),
    ('text text 1.1.1.1. 2.2.2.2.', ['1.1.1.1', '2.2.2.2']),
    ('text text 256.256.256.256. 2.2.2.2.', ['2.2.2.2']),
    ('text text 255.255.255.255. 2.2.2.2.', ['255.255.255.255', '2.2.2.2']),
]


TEST_CASES_SEARCH_TIME = [
    ('23:55 text text', ['23:55']),
    ('23:55:20 text text', []),
    ('text text 23:55 text text', ['23:55']),
    ('text text 23:55', ['23:55']),
    ('text text 23:55 11:23PM', ['23:55', '11:23PM']),
    ('text text 23:55. 11:23PM', ['23:55', '11:23PM']),
    ('text text 23:55.11:23PM', ['23:55', '11:23PM']),
    ('text text 23:55,11:23PM', ['23:55', '11:23PM']),
    ('text text 23:55:11:23PM', []),
    ('''Время суток вида `HH:MM [PM/AM]`. Например: `23:55`, `1:30 PM`, `07:15AM`,
`1:20`, `00:35`.
В то же время не отыскивать  следующие конструкции (и их части): `12:5`, `25:10`,
`12:75`, `12:55:55`, `:40`, `12:`, `1:30 AMX`, `11:42 PM1`, `17:08 PM`.
То есть все времена как в 24-часовом формате, так и в 12-часовом.
Если время может трактоваться как в 12ти так и в 24-часовом формате, выбирать тот,
который имеет наибольшую длину (12-часовой), например в строке `Они решили собраться в 09:00 PM`.
Хотя и `09:00`, и `09:00 PM` являются корректными временами суток, выбирается последний вариант.''',
     ['23:55', '1:30 PM', '07:15AM', '1:20', '00:35', '09:00 PM', '09:00', '09:00 PM'])
]


RE_VALIDATION_IP   = r'\b((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9]))' #done
#RE_SEARCH_IP       = r'\b((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9]))([^(\.\S)]&[.,(\s)])'
#RE_SEARCH_IP       = r'(?<!\.)(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])(?!(?:(?:\.\d)|\d)))'
RE_SEARCH_IP       = r'(?<!\.)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])(?!(?:(?:\.\d)|\d))'
#RE_VALIDATION_TIME = r'([0-9]|1[0-9]|2[0-4]):([0-5][0-9])|(([0-9]|1[0-2]):([0-5][0-9])(?: [AP]M))'
RE_VALIDATION_TIME = r'(?:(?:[0-9]|0[0-9]|1[0-1])\:[0-5][0-9](?:\s?(?:[AP]M)+(?!\w)))|(?:(?<![\d\:])(?:[0-9]|0[0-9]|1[0-9]|2[0-3])\:[0-5][0-9](?!\s?(?:[AP]M)))'
RE_SEARCH_TIME     = r'(?:(?<![\d\:])(?:[0-9]|0[0-9]|1[0-1])\:[0-5][0-9](?:\s?(?:[AP]M)+(?!\w)))|(?:(?<![\d\:])(?:[0-9]|0[0-9]|1[0-9]|2[0-3])\:[0-5][0-9](?!\s?(?:[AP]M)))(?!\:)'


def valid_ip(text):
    return re.fullmatch(RE_VALIDATION_IP, text) is not None


def search_ip(text):
    return re.findall(RE_SEARCH_IP, text)


def valid_time(text):
    return re.fullmatch(RE_VALIDATION_TIME, text) is not None


def search_time(text):
    return re.findall(RE_SEARCH_TIME, text)


def run_data_tests(suite, function, cases):
    score = 0
    for sample, expected in cases:
        result = function(sample)
        if result == expected:
            score += 1
        else:
            print(f'Неверный ответ для примера {sample!r} [{suite}]')
            print(f'Ожидалось: {expected!r}\n Получено: {result!r}')
    max_score = len(cases)
    print(f'{suite:>20}: {score}/{max_score}')


run_data_tests('Валидация IP', valid_ip, TEST_CASES_VALIDATION_IP)
run_data_tests('Поиск IP', search_ip, TEST_CASES_SEARCH_IP)
run_data_tests('Валидация времени', valid_time, TEST_CASES_VALIDATION_TIME)
run_data_tests('Поиск времени', search_time, TEST_CASES_SEARCH_TIME)

